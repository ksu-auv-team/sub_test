#include "ros/ros.h"
#include <mavros_msgs/CommandBool.h>
#include <mavros_msgs/SetMode.h>
#include <mavros_msgs/OverrideRCIn.h>
#include <mavros_msgs/Mavlink.h>
#include <mavros_msgs/RCIn.h>
#include <std_msgs/Bool.h>
#include  <math.h>

#define ROLL_CHAN 0
#define PITCH_CHAN 1
#define THROT_CHAN 2
#define YAW_CHAN 3
#define MODES_CHAN 4	

#define HIGH_PWM 2000
#define MID_PWM 1500
#define LOW_PWM 1000

double startTime;

enum MODE 
{
	DISABLE,
	SWIM
};

bool kill = false;

void status_callback(const std_msgs::Bool &msg)
{
	if (msg.data == false)
	{
		kill = true;
	}
	else
	{
		kill == false;
	}
}

MODE decide_current_mode()
{
	if (kill)
	{
		return DISABLE;
	}
	else if( abs(ros::Time::now().toSec() - startTime) < 10.00d )
	{
		armimg_client.call(arm_cmd_ &&
		arm_cmd.response.success){
			ROS_INFO("Vehicle armed, max speed for 4 seconds forward");
		return SWIM;
	}
	else
	{
		return DISABLE;
	}	
}

int main (int argc, char **argv)
{
		
	ros::init(argc, argv, "process_image");
	
	ros::NodeHandle n;
	
	startTime = ros::Time::now().toSec();
	
	ros::Subscriber status_sub = n.subscribe("mission_status", 1, status_callback);
	ros::ServiceClient armimg_client = nh.serviceClient<mavros_msgs::CommandBool>("mavros/cmd/arming");
	ros::ServiceClient set_mode_client = nh.serviceClient<mavros_msgs::SetMode>("mavros/set_mode");
	ros::Publisher pub_mavros = n.advertise<mavros_msgs::OverrideRCIn>("/mavros/rc/override", 1);
	
	mavros_msgs::CommandBool arm_cmd;
	arm_cmd.request.value = true;
	
	mavros_msgs::OverrideRCIn MAV_MSG;
	
	ros::Rate RC_COMM_RATE(45);
	
	while(ros::ok())
	{
		switch(decide_current_mode())
		{

			case DISABLE:
				MAV_MSG.channels[ROLL_CHAN] = MID_PWM;
				MAV_MSG.channels[PITCH_CHAN] = MID_PWM;
				MAV_MSG.channels[THROT_CHAN] = LOW_PWM;
				MAV_MSG.channels[YAW_CHAN] = MID_PWM;
				MAV_MSG.channels[MODES_CHAN] = LOW_PWM;
				break;
				
			case SWIM:
				MAV_MSG.channels[ROLL_CHAN] = MID_PWM;
				MAV_MSG.channels[PITCH_CHAN] = 2000; //full power test
				MAV_MSG.channels[THROT_CHAN] = 1600;
				MAV_MSG.channels[YAW_CHAN] = MID_PWM;
				MAV_MSG.channels[MODES_CHAN] = HIGH_PWM;
				break;
		}
		pub_mavros.publish(MAV_MSG);
		ros::spinOnce();
		RC_COMM_RATE.sleep();
	}
	return 0;
}
